// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model userMaster {
  id       Int    @id @default(autoincrement())
  name     String
  email    String
  password String
}

model user {
  id        Int     @id @default(autoincrement())
  name      String
  dvlClient dvl[]
  orders    Order[]
}

model magazine {
  id            Int          @id @default(autoincrement())
  name          String
  author        String
  cover         String[]
  company       String
  volume        String
  description   String
  price         Float
  magazine_pdf  String
  createDate    DateTime     @default(now())
  updateAt      DateTime     @default(now())
  article       article[]
  SubCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int?
  Category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    Int?
}

model article {
  id            Int          @id @default(autoincrement())
  name          String
  cover         String
  volume        String
  author        String
  description   String
  articlepdf    String
  status        Status?      @default(FALSE)
  createDate    DateTime     @default(now())
  updateAt      DateTime     @default(now())
  magazine      magazine?    @relation(fields: [magazineId], references: [id])
  magazineId    Int?
  company       String?
  price         Float?
  Category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  SubCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int?
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String
  createDate  DateTime      @default(now())
  updateAt    DateTime      @default(now())
  article     article[]
  magazine    magazine[]
  subcategory SubCategory[]
}

model SubCategory {
  id          Int        @id @default(autoincrement())
  name        String
  category    Category   @relation(fields: [categoriaId], references: [id])
  categoriaId Int
  magazine    magazine[]
  createDate  DateTime   @default(now())
  updateAt    DateTime   @default(now())
  article     article[]
  articleId   Int?
}

model dvl {
  id        Int    @id @default(autoincrement())
  name      String
  price     Int?
  picture   String?
  paidOut   Int
  toReceive Int

  user    user?  @relation(fields: [userId], references: [id])
  userId  Int?
  Order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?
}

model Order {
  id         Int      @id @default(autoincrement())
  items      Json[]
  status     String
  createDate DateTime @default(now())
  updateAt   DateTime @default(now())
  dvl        dvl[]
  user       user?    @relation(fields: [userId], references: [id])
  userId     Int?
}

enum Status {
  TRUE
  FALSE
}
