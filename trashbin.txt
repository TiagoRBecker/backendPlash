console.log("erro ao fazer login")
 
avatar
 
image
 
avatar
 
image
 
avatar
 
image
 
avatar
 
image
 
avatar
 
image
 
// ajuste conforme necessário
 
accessToken
 
adress:user?.adress,
            cep:user?.cep,
            city:user?.city,
 
adress
 
adress
 
adress
 
avatar
 
avatar
 
JWT
 
 const accessToken = jwt.sign( {
         id: user.id,
        name: user.name,
        email: user.email}, process.env.SECRET,{ expiresIn: '1d' });
 
 process.env.NEXTAUTH_SECRE
 
// adicione outros campos necessários ao token
 
chekingEmail
 
chekingEmail
 
console.log("email e senha batem pode fazer o login ")
 
email
 
email, password
 
credentials
 
 console.log(credentials)
 
createAccount
 
const chekingEmail = await prisma?.user.findUnique({
        where:{
            email:
        }
     })
     if(chekingEmail){
       throw new Error("E-mail já cadastrado no banco de dados!");
       
     }
    try {
        const create = await prisma?.user.create({
            data: {
              name,
              password,
              email,
              cep,
              adress,
              city,
              complement,
              numberAdress,
      
            },
          });
          return res.status(200).json({message:"Conta criada com sucesso!"})
    } catch (error) {
        return this?.handleError(error,res)
    }
    finally{
        return this?.handleDisconnect()
    }
 
email
 
name,
      password,
      email,
      cep,
      adress,
      city,
      complement,
      numberAdress,
 
createAccount
 
signup
 
 console.log(req.body)
 
 return res.status(500).json({message:"E-mail já cadastrado no banco de dados!"})
 
res,error
 
Categories
 
CategoriesController
 
CategoriesController
 
route.post("/create-user",async (req:Request,res:Response)=>{
 const creatUser = await prisma?.user.create({
  data:{
    name:"Admin",
   
    }
    

 
 })
 return res.status(200).json(creatUser)
})
 
dada
 
items.qtd
 
 "https://nova-escola-producao.s3.amazonaws.com/9jwdcjASGFYN5GAaDFGYSexYQpTNTHzJ9CWPAwRse8A4CBK3FchguH28ECBX/ne326-arevista-01.jpg",
 
title
 
book
 
book
 
https://plashmagazine.s3.sa-east-1.amazonaws.com/1-4ac0c1de-934d-4d69-9f65-74043271f59d.png
 
teste
 
teste
 
create
 
upsert
 
   connect:{
            id:2
          }
 
update
 
 connect:{
            id
           }
 
:{
              
            }
 
update
 
 create:{
             
              
            }
 
cover:teste
 
"teste"
 
[""]
 
 : "url_do_pdf_da_revista",
 
pdf
 
article
 
Nova Revista
 
teste
 
name
 
 data:{

        }
 
update
 
library:{
          include:{
            magazine:true
          }
        }
 
 user     user?              @relation(fields: [userId], references: [id])
  userId   Int?
 
 Libray    Libray[]
 
Libray
 
upsert
 
where:{
          id:2
        }
       
 
id:2,
 
 update:{
          
        }
 
library:{
            create:{
              
            }
          }
 
 library:{
      create:{
        magazine

        
      }
    }
 
library:{
      create:{
        name:"Admin"
      }
 
articles Json[]
  user     user?              @relation(fields: [userId], references: [id])
  userId   Int?
 
  // Passo 2: Atualize a biblioteca do usuário adicionando a nova revista
        prisma?.user.upsert({
          where: {
              id:2
          },
        
      })
 
  update: {
            library:{
              create:{
                 magazine:{
                  
                 }
              }
            }
          },
          create: {
            
          }
 
user_id_tag: { // <-- And this bit is important
                  user_id: user.userId,
                  tag: tag.tag
              }
 
likes
 
user:{}
 
  where: {
            id:2
          },
          

         
          
          
          

          
    })
 
update:{
            magazine:{
              create:{
               
                name: "Nova Revista",
                magazine_pdf: "Nova Revista",
                author: "Nova Revista",
                cover: "url_do_pdf_da_revista",
               }
                
              }
            },
            
 
create:{
            userId:usuario.id
          }
 
ata:{
 
update
 
   userId:usuario.id
 
     },
            userId:usuario.id
 
 name: "Nova Revista",
                magazine_pdf: "Nova Revista",
                author: "Nova Revista",
                cover: "url_do_pdf_da_revista",
 
data
 
create
 
update
 
create
 
cover
 
article
 
teste
 
usuario.id
 
 update: {
            userId:2,
            magazine:{
              create:{
                author:"teste",
                name:"teste",
                cover:["este"],
                id:2,
              }
            }
          
          },
 
  magazine: {
              create:{
              
              

              },
            },
          },
        });
 
 magazine_pdf:"teste"
 
magazine_pdf:"teste",
 
["teste"]
 
"teste"
 
 author:"teste",
                name:"teste",
                magazine_pdf:"teste",
                cover:['teste']
 
 novaRevista
 
data: {
            magazine: {
              create: novaRevista,
            },
          },
 
userId: usuario.id,
 
update
 
userId
 
 const result = await prisma?.user.upsert({
        where: {
          id: 2,
        },
        update:{
          library:{
            create:{
              articles:novaRevista
            }
          }
           
          
        }
       
      });
      console.log(result);
 
novaRevista
 
magazine_pdf
 
name
 
cover: ["url_da_capa"],
 
name
 
author: "Autor da Nova Revista",
 
 create:{
              articles:"teste"
            }
 
create:{
              magazine:novaRevista
            }
 
create
 
novaRevista
 
update:{}
 
userId
 
const result = await prisma?.user.update({
        where: {
          id: userId,
        },
        data:{
          library:{
            create:{
              magazine:{
                create:{
                  name: "Nova Revista",
        author: "Autor da Nova Revista",
        cover: ["url_da_capa"],
        magazine_pdf: "url_do_pdf_da_revista",
              }
            }
          }
        }
      });
 
update
 
data: {
          library: {
            update: 
          },
        },
 
{
              magazine: {
                create:{
                  
                }
              },
            },
 
novaRevista
 
  create:,
              },
 
novaRevista
 
const result = await prisma?.user.update({
        where: {
          id: 2,
        },

       data:{
        library:{
          update:{
            data:novaRevista
          }
        }
       }
       
      });
 
const result = await prisma?.user.update({
        where: {
          id: 2,
        },

       data:{
        library:{
          update:{
            data:novaRevista
          }
        }
       }
       
      });
      console.log(result);
    }
 
{
              magazine:{
                create:{
                  author:""
                }
              }
            }
 
articles:no
 
create
 
novaRevista
 
updateMany
 
data:{
        
       }
 
:{
         create:{
          magazine:{
            create:{
              name: "Nova Revista",
              author: "Autor da Nova Revista",
              cover: ["url_da_capa"],
              magazine_pdf: "url_do_pdf_da_revista",
            }
          }
         }
        }
 
library
 
upsert
 
 update:{
            data:{
              articles:{
                
              }
            }
          }
 
novaRevista
 
 library:{
          create:{
            magazine:{
              create:{
                author:"teste",
                magazine_pdf"
              }
            }
          }
        }
       }
 
magazine:{
              create:{
                
              }
            }
 
create
 
update
 
create
 
ame: "New libray",
 
 name     String
 
 
                  author:"teste",
                  magazine_pdf:"teste",
                  name:"teste",
                  cover:['este']
 
create:{
 
magazine
 
true
 
 novaRevista
 
library:{
       
          
          
        }
 
create:{
            magazine:{
              create:novaRevista
                
              
            }
 
 connectOrCreate:{
 
uthor:""
 
libray
 
data:{
    magazine:{
      connect:{
        
      }
    }
   }
 
magazine:{
      connect:{
        
      }
    }
 
where: {
    userId: userId,
  },
   data:{
    magazine:{

    }
   }
 
upsert
 
create
 
updateMany
 
articles:{
      push:novaRevista
    }
 
update: {
    magazine: {
      create: novaRevista,
    },
 
 create: {
    userId: userId,
    name: "Nome da Library",  // Adicione outros campos conforme necessário
    magazine: {
      create: [
        novaRevista,
      ],
    },
  },
 
upsert
 
const result = await prisma?.libray.upsert({
  where: {
    user:{
      id:userId
    }
  },
 
  update: {
    magazine: {
      create: novaRevista,
    },
  },
});
 
userId
 
 create: {
    name: "Nome da Library",  // Adicione outros campos conforme necessário
    magazine: {
      create: [
        novaRevista,
      ],
    },
  },
 
const magazinesUpdate = await prisma?.user.create({
       
     })
 
upsert
 
 where:{
         id:2
       },
       create:{
        library:{
          create:{
            magazine:{
             
            }
          }
        }
       }
      })
 
const magazinesUpdate = await prisma?.user.upsert({
       where:{
         id:2
       },
       create:{
        library:{
          create:{
            magazine:{
              create:{
                
                author:"Tiago",
              
                magazine_pdf:"https://plashmagazine.s3.sa-east-1.amazonaws.com/aRTIGO-13446a18-6214-4a20-9a91-0f23466fbd04.pdf",
                name:"Skate",
                cover:["https://plashmagazine.s3.sa-east-1.amazonaws.com/1-bcd001a9-bd93-4707-b038-f9508c306e74.png"]
              }
            }
          }
        }
       }
      })
 
data:{
       library:{
        create:{
          magazine:{
            create:{
            
              
            }
          }
        }
       }
       }
 
update
 
    id:2
 
  }
              }
 
  magazine:{
                create:{
 
user:{
          id:2
         }
 
libray
 
 const magazines = "teste"
 
 where:{
        id:2
      }
 
user
 
data:{
        library:{
          update:{
            data:{
              magazine:{
                update:{
                  data:{
                    author:"",
                    cover:"",
                    
                  }
                }
              }
            }
          }
        }
 
update:{
        library:{
          create:{
            magazine:{
               create:{
                author:"tiago",
                name:"Nome da revitsa",
                cover:"https://www.google.com/imgres?imgurl=https%3A%2F%2Fimg.elo7.com.br%2Fproduct%2Foriginal%2F33FFCD8%2Falbum-fotolivro-revista-15x20-com-20-paginas-revista.jpg&tbnid=0YL3Xj-tacRxtM&vet=12ahUKEwiz2prynY2EAxV0CbkGHZddDdUQMygFegUIARC_AQ..i&imgrefurl=https%3A%2F%2Fphotomuniz.alboompro.com%2Fpost%2F55851-revista-fotografica&docid=5ddQ0wkB3DhhPM&w=4500&h=3000&q=foto%20revista&ved=2ahUKEwiz2prynY2EAxV0CbkGHZddDdUQMygFegUIARC_AQ",
                magazine_pdf:"teste",
                id:1
              }
            }
          }
        }
      }
 
upsert
 
  magazines Json[]
 
  price         Float
 
  description   String
 
  volume        String
 
  company       String
 
 model magazine {
 
 const teste = await prisma?.user.update({
        where:{
          id:2
        },
          data:{
            library:"{"id":"2"}"
          }
        
      })
 
library:{
            update:{
              data:{
                name:"teste"
              }
            }
          }
 
update:{
 
upsert
 
upsert
 
libray
 
  
       where:{
       user:{
        id:2
       }
       },
       update:{

       }

        
      })
 
 userId:2
 
select:{
        userId:true
       },
 
where:{
        userId:2
       }
 
 update:{
          userId:2,
          magazines:{
            push:magazines
          }
        }
 
create:{
          magazines:"fdf"
          
        
        }
 
[magazines]
 
set:
            }
 
   })
 
const userLibrary = await prisma?.user.findUnique({
        where:{
          id:2
        },
        include:{
          library:{
            
          }
        }
 
nclude:{
          library:{

          }
 
update
 
 }
        }
 
,data:{
          library:{
            update:{
             data:{
              magazines:{
                push:{
                  toJSON() {
                    magazines
                  },
                }
              }
             }
            }
 
magazines
 
 magazines:{
            
              }
 
:magazines
 
create
 
["teste"]
 
 const id =2
 
Libray
 
Libray:true,
 
const library = await prisma?.libray.upsert({
            where: {
              id: userId,
            },
            update: {
              magazines: {
                push: novasRevistas,
              },
            },
 
userId
 
library
 
const library = await prisma?.libray.update({
        where: {
          userId:Number(id) as number
        } as any[],
        data: {
          magazines: {
            push: [
              {
                name: "New Magazine",
                price: 9.99,
                picture: "url2",
              },
              // Adicione outros itens conforme necessário
            ],
          },
        },
      });
 
userId:Number(id) as number
 
library
 
library:{
      create:{
        name:'Admin'
      }
 
  library   Libray[]
 
user      user?  @relation(fields: [userId], references: [id])
  userId    Int?
 
library
 
  const library = await prisma?.libray.update({
        where: {
          userId:Number(id) as number
        } as any,
        data: {
          magazines: {
            push: [
              {
                name: "New Magazine",
                price: 9.99,
                picture: "url2",
              },
              // Adicione outros itens conforme necessário
            ],
          },
        },
      });
    }
 
as any
 
user: {
            id: 2 as number,
          },
 
any
 
 user: {
              id: 2,
            },
 
library
 
 user      user[]
 
 const addLibrary = await prisma?.libray.create({
        data:{
        magazines:["teste"],
        
        },
 
 const library = await prisma?.user.update({
         where:{
          id:1
         },
         data:{
          library:{
            update:{
              data:{
                magazines:[teste]
              }
              }
            }
          }
         }
        })
 
magazines:{
                set
 
create
 
libray
 
 where: {
            user: {
              id: 2,
            },
          },
          data: {
            magazines: {
              push: [
                {
                  name: 'New Magazine',
                  price: 9.99,
                  picture: 'url2',
                },
                // Adicione outros itens conforme necessário
              ],
            },
          },
        });
 
library
 
const library = await prisma?.libray.update({
          where: {
            userId: 2,  // Substitua pelo ID do usuário desejado
          },
          data: {
            magazines: {
              push: [
                {
                  name: 'New Magazine',
                  price: 9.99,
                  picture: 'url2',
                },
                // Adicione outros itens conforme necessário
              ],
            },
          },
        });
 
library
 
  const library = await prisma?.user.update({
          where: {
            id: 2,
          },
          data: {
            library: {
              update: {
                data: {
                  magazines:{
                    push: [
                      {
                        name: 'New Magazine',
                        price: 9.99,
                        picture: 'url2',
                      },
                      // Adicione outros itens conforme necessário
                    ],
                  }
                  
                },
              },
            },
          },
        });
        
 
library
 
magazines
 
const library = await prisma?.user.update({
          where: {
            id:2
          },
          update: {
            magazines: {
              push: [
                {
                  name: 'New Magazine',
                  price: 9.99,
                  picture: 'url2',
                },
              ],
            },
          },
        });
 
userId:2
 
libray
 
id:2,  // Substitua pelo ID do usuário desejado
 
upsert
 
 as number
 
library
 
 const library = await prisma?.libray.upsert({
          where: {
            userId: 2,  // Substitua pelo ID do usuário desejado
          },
          update: {
            magazines: {
              push: [
                {
                  name: 'New Magazine',
                  price: 9.99,
                  picture: 'url2',
                },
              ],
            },
          },
        });
 
library
 
const library = await prisma?.user.update({
         where:{
          id:1
         },
         data:{
            library:{
              update:{
                data:{
                  magazines:{
                    push:[{
                      
                    }]
                  }
                }
              }
            }
         }
           
        })
 
dvlItems
 
libray
 
where:{
            
          },
          data:{

          }
 
userId:1
 
user
 
 where:{
            id:2
          },
          data:{
            library:{
              update:{
                data:{
                  magazines:{
                    push:[""]
                      
                    
                  }
                }
              }
            }
          }
 
}
 
library:{
             
            
            }
 
 update:{
                data:{
                  push
                }
 
data:{

            library:{
              
            }
 
,data:{
            
            }
          }
        })
        
 
library:{
              
               
              }
 
reate:{
 
 magazines:{
                
                }
 
userId:2
 
libray
 
 console.log(createDvlItems)
 
route.post("/user/:slug",async (req:Request,res:Response)=>{
  const creatUser = await prisma?.user.findUnique({
    where:{
      name:""
    }
   data:{
     name:"Admin",
     library:{
       create:{
         name:'Admin'
       }
     }
   },
  
  })
  return res.status(200).json(creatUser)
 })
 
findMany
 
create
 
 include:{
    library:{
    
    }
  }
 
magazines      
 
items
 
Number(
 
findUnique
 
id
 
findUnique
 
  select:{
     name:true,
     orders:true,
     dvlClient:true
     
   },
 
user
 
user
 
getStatus.metadata
 
 console.log(createOrder)
 
Number(metadata.user_id)
 
console.log(createOrder)
 
1320988667
 
return res.status(200).json(metadata);
 
satusPayment
 
gtOrder
 
getStatus
 
getStatus
 
gtOrder
 
 console.log(gtOrder.metadata);
 
include:{
         dvl:true
       }
 
1320964195
 
export const getPayment = async (req: Request, res: Response) => {
  
}
 
route.get("/order",CreateOrder)
 
serId
          },
 
orderId: Number(createOrder?.id),
 
dvlItems
 
orders:{
          include:{
            dvl:true
          }
        }
 
 Order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?
 
  dvl        dvl[]
 
  })),
 
orderId
        }
 
orderId: Number(createOrder?.id),
 
 dvlItems.map((dvlItem: any) => ({
 
...dvlItem,
 
order
 
dvl
 
dvl: {
            create: dvlItems.map((dvlItem:any) => ({
              ...dvlItem,
              orderId: Number(createOrder?.id)
            })),
 
// Set the orderId here
 
 dvl:{
            create:dvlItems

            
          }
 
dvlClient:true
 
deletCategory
 
category
 
 status
 
name: editCategory,
 
editCategory
 
category
 
deleteCategory
 
updateCategory
 
updateCategory
 
 //Cria uma categoria
  async createDVL(req: Request, res: Response) {
    const {
        name,paidOut,toReceive,userId
    } = req.body;
    try {
      const createMagazine = await prisma?.dvl.create({
        data: {
          name,paidOut,toReceive,userId
        },
      });
      return res.status(200).json({ message: "Categoria criada com sucesso!" });
    } catch (error) {
         console.log(error)
      return this?.handleError(error, res);
    } finally {
      return this?.handleDisconnect();
    }
  }
 
 include:{
          magazine:true
        }
 
categoryOne
 
getOneCategory
 
categories
 
 include:{
            magazine:true,
            article:true
        }
 
category
 
Categories
 
DvlController
 
DvlController
 
import { Response, Request } from "express";
import prisma from "../../server/prisma";

class Magazine {
  //Funçao para tratar dos erros no servidor
  private handleError(error: any, res: Response) {
    console.error(error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
  //Função para desconetar o orm prisma
  private async handleDisconnect() {
    return await prisma?.$disconnect();
  }
  //Retorna todas as categorias
  async getAllMagazine(req: Request, res: Response) {
    try {
      const getMagazine = await prisma?.magazine.findMany({
        include: {
          article: true,
          Category:true
        },
      });

      return res.status(200).json(getMagazine);
    } catch (error) {
      console.log(error);
      return this?.handleError(error, res);
    } finally {
      return this?.handleDisconnect();
    }
  }
  //Retorna uma categoria especifica
  async getOneMagazine(req: Request, res: Response) {
    const { slug } = req.params;

    try {
      const magazine = await prisma?.magazine.findUnique({
        where: { id: Number(slug) },
      });

      return res.status(200).json(magazine);
    } catch (error) {
      return this?.handleError(error, res);
    } finally {
      return this?.handleDisconnect();
    }
  }

  //Cria uma categoria
  async createMagazine(req: Request, res: Response) {
    const {
      author,
      company,
      name,
      description,
      categoryId,
      price,
      volume,
     
    } = req.body;
  
      const {cover_file, pdf_file } = req.files as any
      const pdf = pdf_file[0]?.location
      const cover = cover_file[0]?.location
    try {
      const createMagazine = await prisma?.magazine.create({
        data: {
          author,
          company,
          name,
          description,
          magazine_pdf:pdf,
          price:Number(price),
          volume,
          cover:[cover],
          categoryId:Number(categoryId),
        },
      });
      return res.status(200).json({ message: "Categoria criada com sucesso!" });
    } catch (error) {
      console.log(error)
      return this?.handleError(error, res);
    } finally {
      return this?.handleDisconnect();
    }
    
  }
  //Atualiza uma categoria especifica
  async updateMagazine(req: Request, res: Response) {
    const { slug} = req.params
    const {
      
      author,
      company,
      name,
      description,
      categoryId,
      price,
      volume,
     
    } = req.body;
    console.log(slug)
      const {cover_file, pdf_file } = req.files as any
      const pdf = pdf_file[0]?.location
      const cover = cover_file[0]?.location

    if (!slug) {
      return res
        .status(404)
        .json({ message: "Não foi possivel atualizar o imóvel!" });
    }
    try {
      const updateMagazine = await prisma?.magazine.update({
        where: {
          id: Number(slug),
        },
        data: {
          author,
          company,
          name,
          description,
          magazine_pdf:pdf,
          price:Number(price),
          volume,
          cover:[cover],
          categoryId:Number(categoryId),
        },
      });
      return res
        .status(200)
        .json({ message: "Categoria atualizada com sucesso!" });
    } catch (error) {
       console.log(error)
      return this.handleError(error, res);
    } finally {
      return this?.handleDisconnect();
    }
    
  }
  //Delete uma categoria especifica
  async deleteMagazine(req: Request, res: Response) {
    const { id } = req.body;
    if (!id) {
      return res
        .status(403)
        .json({ message: "Não foi possível encontrar a categoria!" });
    }
    try {
      const deletMagazine = await prisma?.magazine.delete({
        where: {
          id: Number(id),
        },
      });
      return res
        .status(200)
        .json({ message: "Categoria deletado com sucesso!" });
    } catch (error) {
      return this?.handleError(error, res);
    } finally {
      return this?.handleDisconnect();
    }
  }
}

const MagazineController = new Magazine();
export default MagazineController;

 
//User

//User Master
 
//Payemnts and Orders
 
: { children: React.ReactNode }
 
// app/providers.tsx
 
dvlClient:{
         
        }
 
 select:{
            
          }
 
  include:{
        
        orders:{
        include:{
          dvl:true
        }
 
dvlClient:true,
 
  orders:true
 
{
              name
            }
 
dvlItems
 
 id        Int    @id @default(autoincrement())
 
user    user?  @relation(fields: [userId], references: [id])
  userId  Int?
 
  dvlClient dvl[]
 
  id        Int    @id @default(autoincrement())
 
 id:Number(items.id),
 
const { slug } = req.params
 
:slug
 
dvls
 
const dvls = await prisma?.dvl.findMany({
 
items
 
id
 
 console.log(getStatus)
 
  const id = data.i
 
console.log(data.id)
 
 try
 
console.log(getStatus)
 console.log(getStatus.status)
 
status
 
onsole.log(req.body)
 
gtOrder
 
 console.log(gtOrder)
 
WebHook
 
webhook
 
post
 
notification_url:"https://aff0-2804-4b0-11b0-4800-7192-45bb-486a-3cb3.ngrok-free.app/webhook",
 
 notification_url:"http://localhost:5000/webhook",
 
://aff0-2804-4b0-11b0-4800-7192-45bb-486a-3cb3.ngrok-free.app
 
webhook
 
   console.log(createPreference)
 
console.log(req.query)
 
TEST-8338383558586641-083109-6e8b7e1cee69dfe04fc5eb253f8f38d1-1440745780
 
 accessToken:"",
 
TEST-5209000350365804-012112-78908f97b5f3d4d1b9b3627c2e1676f9-1440745780
 
WebHook
 
get
 
GatwayPayment
 
,(req,res)=>{}
 
 console.log(req.query)
 
ngrok
 
 try {
   
    

    const createPreference = await preference.create({
      body: {
      
        back_urls: {
          success: "http://localhost:3000/sucess",
          failure: "http://localhost:3000/failure",
        },
        items: items,
        payment_methods:{
            installments:4,
            excluded_payment_types:[
                {
                    id: "ticket"
                }
            ]
        },
        auto_return:"approved",
        
  
    
       
      },
    }) ;
   
     
 
    return res.status(200).json({id:createPreference.id});
  } catch (error) {
    console.log(error);
  }
 
  const {book} = req.body;
  const items = book.map((items: any) => {
    return {
      id: items.id,
      title: items.title,
      unit_price: items.price,
      currency_id: "BRL",
      quantity: items.qtd,
    };
  });
 
GatwayPayment
 
console.log()
 
metadata:{
          userID:
        }
 
 const paymentMethods = {
        creditCard: "all",
        bankTransfer: "all",
        onboarding_credits: "all",
        wallet_purchase: "all",
        maxInstallments: 4, // Configuração de parcelamento máximo
      }
 
payment_methods:{
        default_payment_method_id:"Pix"
       }
 
payment.s
 
const preference = new Preference(mercadoPago);
const payment = new Payment(mercadoPago);
 
import { MercadoPagoConfig, Payment, Preference ,Customer} from "mercadopago";
 
payment.create
 
var mercadopago = require('mercadopago');
mercadopago.configurations.setAccessToken("TEST-5209000350365804-012112-78908f97b5f3d4d1b9b3627c2e1676f9-1440745780");

 
mercadopago.payment.save(req.body)
  .then(function(response:any) {
    const { status, status_detail, id } = response.body;
    res.status(response.status).json({ status, status_detail, id });
  })
  .catch(function(error:any) {
    console.error(error);
  })
 
paymentMethods
 
     
        ...settings.customization,
 
settings = {
 
 customization: {
      visual: {
        style: {
          theme: "default",
        },
      },
 
initialization: {
      preferenceId: "<PREFERENCE_ID>",
      payer: {
        firstName: "",
        lastName: "",
        email: "",
      },
    },
 
 atm: "all",
 
 payment_methods:{
            default_card_id:"all",
            excluded_payment_types:[
              {id:"atm"}
            ]
        }
 
id:createPreference.id
 
    console.log(createPreference.id)
 
  default_payment_method_id:"pix",
 
"atm"
 
 const method = payment.create({
    body:{

    }
  })
 
{book}
 
const payment = new Payment(mercadoPago);
 
 payment.get({id:"pix"})
    console.log(payment)
 
preference
 
const paymentMethods = await payment.get();
 
 mercadoPago..getPaymentMethods
 
payment
 
  payment.get().then(console.log).catch(console.log);
 
aymentMethod.get().then(console.log).catch(console.log);
 
paymentMethod
 
PaymentMethod
 
payment_methods: {
            creditCard: "all",
                    bankTransfer: "all",
                    atm: "all",
                    onboarding_credits: "all",
                    wallet_purchase: "all",
            maxInstallments: 4
          },
 
paymentMethods
 
   console.log(items)
 
cart
 
cart
 
createPreference
 
 res.json({
        id: result.id,
      });
 
cart
 
cart
 
cart
 
payment
 
 crossOriginIsolated.log(cart0)
 
createPreference
 
    console.log(paymente)
 
  purpose:"",
 
const  paymente = await payment.create({body:{
        installments:6,
        payment_method_id:"pix"
        

        
      }})
 
payment_method_id
 
external_reference
 
createPreference
 
  console.log(items);
 
client
 
payment_methods:{
        default_payment_method_id:"PIX"
       }
 


 
 payment_methods:{
            default_payment_method_id:"pix",
             
            installments:6,
           
            
            
             
            
            
            
        },
 
 excluded_payment_methods:[
                {id:"atm"},
                {id:"ticket"}
            ]
 
   {}
            ],
 
ticket',
 
atm',    
      
 
// Exclui métodos de pagamento como transferência bancária
 
   "atm"
            ]
 
default_payment_method_id:"pix"
 
efault_installments:6,
 

			onboarding_credits: "all",
			wallet_purchase: "all",
			bankTransfer: "all",
 
creditCard: "all",
 
paymentMethods
 
maxInstallments: 6
 
		atm: "all",
 
payment_methods:{
            default_installments:4,
            default_payment_method_id:'pix'
        }
 
[
                {
                    id:"1",
                    title:"Revista Digital",
                    quantity:1,
                    unit_price:19,
                    description:"Revista digital",
                    picture_url:"https://img.freepik.com/vetores-gratis/revista-ilustracao-realista-com-paginas-abertas-com-artigos_1284-64495.jpg"

                }
            ],
 
'1'
 
items
 
name
 
 [
                {
                  id:"1",
                  title: "Revista Digital",
                  unit_price: 199,
                  currency_id: "BRL",
                  quantity: 1,
                  
                },
              ],
 
: [
                {
                  id:"1",
                  title: "Revista Digital",
                  unit_price: 199,
                  currency_id: "BRL",
                  quantity: 1,
                  
                },
              ],
 
const preferenceItems = {
            items: items,
      
            back_urls: {
              success: "http://localhost:5173/",
              failure: "http://localhost:3000/fallo",
            },
      
            auto_return: "approved",
          };
 
{ cart}
 
[
              {
                title: "Revista Digital",
                unit_price: 199,
                currency_id: "BRL",
                quantity: 1,
                
              },
            ],
 
sucess
 
success
 
console.log(createPreference)
 
preferenceItems as any
 
preference
 
preference
 
const response = await 
           console.log(response)
           return res.status(200).json(response)
 
client
 
.create(preference)
 
preference
 
mercadoPago.configure({ )
 
accessToken:""}
 
require("mercadopago")
 
 Payment
 
m.create({body:{preference }}as any) 
 
payment
 
const client = new MercadoPagoConfig({);
const payment = new Payment(client); 
 
     items: [
                {
                  title: "Revista Digital",
                  unit_price: 199,
                  currency_id: "BRL",
                  quantity: 1,
                  
                },
            ]
 
items:i
 
preference as any
 
 as any
 
.preference?.
 
create
 
response
 
reposnse
 
producto.cantidad
 
ARS
 
producto.precio
 
producto.nombre
 
  const body = {
        transaction_amount: 12.34,
        description: 'Lapis',
        payment_method_id: '1',
        payer: {
            email: 'teste@gmail.com'
        },
    };
    
    // Step 5: Make the request
    payment.create({ body }).then(console.log).catch(console.log);
 
<DESCRIPTION>
 
<EMAIL>
 
<PAYMENT_METHOD_ID>
 
 return res.status(200).json({})
 
payment
 
Response
 
access_token
 
options: { timeout: 5000, idempotencyKey: 'abc' } }
 
   return (  );
 
decrement
 
increment
 
39
 
Number(pay)
 
{
          decrement: Number(someValues[0]),
        },
 
 decrement: {
         
        }
 
paidOut:Number(someValues[0])
 
console.log(dvl, pay)
 
 console.log()
 
"Camisa Skate"
 
console.log(slug)
 
req.body 
 
console.log(req.body)
 
name
 
"Camisa Skate"
 
post
 
findUnique
 
data:{
       paidOut:39
     }
 
updateMany
 
toReceive
 
paidOut
 
post
 
updateMany
 
 where:{
       name:"Camisa Branca"
     },
     data:{
       paidOut:0
     }
 
findMany
 
post
 
 where:{
        name:"Camisa Branca"
      },
      data:{
        paidOut:0
      }
 
updateMany
 
toReceive
 
Skate
 
paidOut
 
findMany
 
post
 
where:{
        name:"Camisa Skate"
      },
      data:{
        paidOut:0
      }
 
updateMany
 
Branca
 
toReceive
 
Skate
 
get
 
findMany
 
updateMany
 
 where:{
        name:"Camisa Branca"
      },
      data:{
        price:39
      }
 
post
 
Skate
 
get
 
findMany
 
{message:"Usuario criado com sucesso",dvls}
 
uniqueDvlEntries
 
;
 
  distinct: ['name'],
      orderBy: {
        name: 'asc', // Ordena por nome para garantir consistência nos resultados
      },
 
prisma
 
createUSer
 
post
 
 where:{
        name:"Camisa Skate"
      },
      data:{
        paidOut:10,
        toReceive:10

      }
 
updateMany
 
const {name} = req.body
 
findMany
 
dvlClient:{
          some:{
            name:{
              contains:"Camisa Skate"
            }
          }
 
user
 
some:{
            name:"Camisa Skate"
          }
 
"Camisa Skate"
 
include:{
        dvlClient:true
      }
 
data:{
        name
      }
 
create
 
category
 
createDVL
 
oute.get("/teste", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});
route.get("/outra-rota", async (req, res) => {
  // Recupera o valor do cookie 'tempHash' da propriedade 'cookies' do objeto 'req'
  const tempHash = req.cookies.tempHash;

  if (tempHash) {
    console.log("rota liberada");
    res.send("autorizaddo");
  } else {
    console.log("nao liberado");
    return res.send("Nao autorizado");
  }
});
 
,createUSer
 
chekingToken, setTempHashCookie
 
/book/:slug
 
onst { slug } = req.params;

  try {
    const getOneMagazine = await prisma?.magazine.findUnique({
      where: { id: Number(slug) },
    });
    if (!getOneMagazine) {
      return res.status(404).json({ message: "Nenhuma revista encontrada!" });
    }
    console.log(req.cookies);
    return res.status(200).json(getOneMagazine);
  } catch (error) {
    console.log(error);
  }
 
name:category
 
category
 
Category
 
CategoriesController
 
Categories
 
Categories
 
payReceive Int
 
magazine
 
    
 
updateMagazine
 
 data: {
          name: category,
        },
 
body
 
, category 
 
magazine
 
createMagazine
 
createMagazine
 
magazine_pdf
 
   cover,
 
magazine_pdf,
 
magazine
 
magazine
 
magazine
 
magazine
 
article
 
magazine
 
slug,
 
updateMagazine
 
 data: {
          name: category,
        },
 
const { slug, category } = req.body;
 
   console.log(req.body)
     console.log(req.files)
 
cate
 
 c
      categoryId,
 
pdf
 
onst magazine_pdf =  req.files?.pdf_file[0].location as any
 
pdf = 
 
magazine_pdf,
 
category
 
category
 
Magazine
 
magazine
 
Magazine
 
magazine
 
magazine
 
author,
          company,
          name,
          description,
          magazine_pdf,
          price,
          volume,
          cover,
          categoryId,
 
author,
      company,
      name,
      description,
      magazine_pdf,
      price,
      volume,
      cover,
      categoryId,
 
magazine
 
magazine
 
magazine
 
getMagazine
 
include: {
          article: true,
        },
 
magazine
 
MagazineController
 
Magazine
 
agazine
 
route.post("/article-upload", UploadController.articleUpload);
 
import UploadController from "../controllers/upload";
 
deleteMagazine
 
updateMagazine
 
createMagazine
 
route.get("/sub-category/:slug", CategoriesController.getOneSubCatefory);
 
getOneMagazine
 
getAllMagazine
 
import UploadController from "../controllers/upload";
 


 
import UploadController from "../controllers/upload";
 
deleteCategory
 
updateNagazine
 
createMagazine
 
getOneMagazine
 
getAllMagazine
 
Category
 
MagazineController
 
Magazine
 
Magazine
 
CategoriesController
 
CategoriesController
 
Categories
 
update
 
categories
 
updateCategory
 
categories
 
Category
 
category
 
 name:category
 
Category
 
create
 
categories
 
if (!getOneHouse) {
                return res.status(404).json({ message: "Nenhum imóvel encontrado!" })
            }
 
categories
 
Category
 
getCategories
 
 if (!getCategories || getCategories.length <= 0) {
                console.log("Aqui")
                return res.status(404).json({ message: "Não possui categorias cadastradas!" })
            }
 
Categories
 
 select:{
                    
                    name:true,
                    id:true,
                    Houses:true
                }
 
categories
 
